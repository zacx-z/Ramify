using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using UnityEngine;
using UnityEngine.UIElements;
using Object = UnityEngine.Object;

namespace Nela.Ramify {
    /// <summary>
    /// A viewer of the view tree with the view model information
    /// </summary>
    ///
    /// The view models used and generated by a view will be displayed on this window
    public class ViewTreeWindow : EditorWindow, IViewTreeWindow {
        public static void OpenViewTreeNode(View viewNode) {
            var viewer = OpenViewTree(FindRoot(viewNode));
            viewer.SelectNode(viewNode);
        }

        public static ViewTreeWindow OpenViewTree(View root) {
            var viewer = EditorWindow.GetWindow<ViewTreeWindow>();
            viewer.Open(root);
            return viewer;
        }

        private static View FindRoot(View viewNode) {
            var node = viewNode.transform;
            var result = viewNode;
            while (node != null) {
                var view = node.GetComponent<View>();
                if (view != null) result = view;
                node = node.parent;
            }

            return result;
        }

        [SerializeField]
        private View _root;
        private ViewTreeView _viewTreeView;
        private Label _nameLabel;
        private Label _stateLabel;
        private List<Editor> _objectEditors = new();

        private void Open(View root) {
            _root = root;
            if (_viewTreeView != null) {
                _viewTreeView.SetViewRoot(root);
                UpdateInfoPanel(new[] { _root });
            }
        }

        private void SelectNode(View viewNode) {
            if (_viewTreeView != null) {
                _viewTreeView.SetSelection(new [] { viewNode.GetInstanceID() });
            }
        }

        private void OnEnable() {
            titleContent = new GUIContent("Ramify View Tree Debugger");

            var visualTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>("Packages/com.nela-system.ramify/Editor/ViewTreeViewer.uxml");
            visualTree.CloneTree(rootVisualElement);

            _nameLabel = rootVisualElement.Q<Label>("nameLabel");
            _stateLabel = rootVisualElement.Q<Label>("stateLabel");

            var viewTreeContainer = rootVisualElement.Q<IMGUIContainer>("viewTreeViewContainer");
            var inspectorContainer = rootVisualElement.Q<IMGUIContainer>("inspectorContainer");

            _viewTreeView = new ViewTreeView(new TreeViewState(), _root);
            if (_root != null) _viewTreeView.Reload();

            viewTreeContainer.onGUIHandler = () => {
                _viewTreeView.OnGUI(viewTreeContainer.contentRect);
            };

            inspectorContainer.onGUIHandler = () => {
                ViewEditor.currentViewTreeWindow = this;
                if (_objectEditors.Count > 0) {
                    int index = 0;
                    foreach (var editor in _objectEditors) {
                        if (index > 0) GUILayout.Space(20);
                        editor.OnInspectorGUI();
                        index++;
                    }
                }
                ViewEditor.currentViewTreeWindow = null;
            };

            if (_root != null)
                UpdateInfoPanel(new[] { _root });

            _viewTreeView.onSelectionChanged += OnTreeNodeSelectionChanged;
        }

        private void OnDisable() {
            foreach (var editor in _objectEditors) {
                DestroyImmediate(editor);
            }
            _objectEditors.Clear();
        }

        private void OnTreeNodeSelectionChanged(IReadOnlyList<View> selectedViews) {
            Selection.objects = selectedViews.Select(v => v.gameObject).ToArray<Object>();

            UpdateInfoPanel(selectedViews);
        }

        private void UpdateInfoPanel(IReadOnlyList<View> selectedViews) {
            if (selectedViews.Count == 1) {
                var view = selectedViews[0];
                bool isActive = view.isActiveAndEnabled;
                _nameLabel.text = view.name;
                _stateLabel.text = isActive ? "ACTIVE" : "INACTIVE";
                if (isActive) _stateLabel.AddToClassList("active");
                else _stateLabel.RemoveFromClassList("active");

                foreach (var editor in _objectEditors) {
                    DestroyImmediate(editor);
                }
                _objectEditors.Clear();

                var views = view.GetComponents<View>();
                foreach (var subView in views) {
                    _objectEditors.Add(Editor.CreateEditor(subView));
                }
            } else {
                _nameLabel.text = $"{selectedViews.Count} view(s) selected";
                _stateLabel.text = "";
            }

            Repaint();
        }

        public void Select(Object refInfoSource) {
            if (_viewTreeView != null) {
                _viewTreeView.SetSelection(new [] { refInfoSource.GetInstanceID() });
            }
        }
    }

    public interface IViewTreeWindow {
        void Select(Object refInfoSource);
    }
}